# encoding: UTF-8
require "net/imap"
require "rubygems"
require 'rest_client'
require 'json'
require "fileutils"
require "cgi"

# Monkeypatch Net::IMAP to support GMail IMAP extensions.
# http://code.google.com/apis/gmail/imap/
module Net
  class IMAP

    # Implement GMail XLIST command
    def xlist(refname, mailbox)
      synchronize do
        send_command("XLIST", refname, mailbox)
        return @responses.delete("XLIST")
      end
    end

    class ResponseParser
      def response_untagged
        match(T_STAR)
        match(T_SPACE)
        token = lookahead
        if token.symbol == T_NUMBER
          return numeric_response
        elsif token.symbol == T_ATOM
          case token.value
          when /\A(?:OK|NO|BAD|BYE|PREAUTH)\z/ni
            return response_cond
          when /\A(?:FLAGS)\z/ni
            return flags_response
          when /\A(?:LIST|LSUB|XLIST)\z/ni  # Added XLIST
            return list_response
          when /\A(?:QUOTA)\z/ni
            return getquota_response
          when /\A(?:QUOTAROOT)\z/ni
            return getquotaroot_response
          when /\A(?:ACL)\z/ni
            return getacl_response
          when /\A(?:SEARCH|SORT)\z/ni
            return search_response
          when /\A(?:THREAD)\z/ni
            return thread_response
          when /\A(?:STATUS)\z/ni
            return status_response
          when /\A(?:CAPABILITY)\z/ni
            return capability_response
          else
            return text_response
          end
        else
          parse_error("unexpected token %s", token.symbol)
        end
      end

      def response_tagged
        tag = atom
        match(T_SPACE)
        token = match(T_ATOM)
        name = token.value.upcase
        match(T_SPACE)
        #puts "AAAAAAAA  #{tag} #{name} #{resp_text} #{@str}"
        return TaggedResponse.new(tag, name, resp_text, @str)
      end

      def msg_att
        match(T_LPAR)
        attr = {}
        while true
          token = lookahead
          case token.symbol
          when T_RPAR
            shift_token
            break
          when T_SPACE
            shift_token
            token = lookahead
          end
          case token.value
          when /\A(?:ENVELOPE)\z/ni
            name, val = envelope_data
          when /\A(?:FLAGS)\z/ni
            name, val = flags_data
          when /\A(?:X-GM-LABELS)\z/ni  # Added X-GM-LABELS extension
            name, val = flags_data
          when /\A(?:INTERNALDATE)\z/ni
            name, val = internaldate_data
          when /\A(?:RFC822(?:\.HEADER|\.TEXT)?)\z/ni
            name, val = rfc822_text
          when /\A(?:RFC822\.SIZE)\z/ni
            name, val = rfc822_size
          when /\A(?:BODY(?:STRUCTURE)?)\z/ni
            name, val = body_data
          when /\A(?:UID)\z/ni
            name, val = uid_data
          when /\A(?:X-GM-MSGID)\z/ni  # Added X-GM-MSGID extension
            name, val = uid_data
          when /\A(?:X-GM-THRID)\z/ni  # Added X-GM-THRID extension
            name, val = uid_data
          else
            parse_error("unknown attribute `%s'", token.value)
          end
          attr[name] = val
        end
        return attr
      end
    end
  end
end


class GMail

  @@ignore_attr = [:Allmail, :Spam, :Trash, :Noselect]
  @@ignore_mailbox = []

  class Mailbox

    attr_accessor :uidmax
    attr_reader :num_seen, :num_indexed, :num_bad
    attr_reader :uidvalidity, :uidnext

    @mailbox_cache = "#{ENV['HOME']}/.gmail-cache"

    def Mailbox.cache_dir
      @mailbox_cache
    end

    def Mailbox.create(imap, name)
      raise "Requires Net::IMAP object" if ! imap.is_a?(Net::IMAP)

      FileUtils.mkdir_p(@mailbox_cache)

      (load_mailbox(name) || Mailbox.new(name)).send(:examine, imap)

    end

    def name
      Net::IMAP.decode_utf7(@name)
    end

    def imap
      @imap
    end

    # Returns true if the cached uidvalidity is equal
    # to the remote uidvalidity.
    def valid?
      @valid
    end

    # Return true if new messages have been appended to the remote
    # mailbox since our last sync. That is our chached uidnext differs
    # from the server uidnext
    def new_msg?
      @new_msg
    end

    def next_message
      @ids ||= begin
        if valid? and ! new_msg?
          puts "; valid but no new messages..."
          ids = []
        elsif valid? and new_msg?
          puts "; valid and new messages...."
          ids = ((@uidmax + 1) .. @uidnext).to_a
        else
          puts "; uidvalidity mismatch...."
          ids = @imap.search(["NOT", "DELETED"]) || []
        end
        puts "; got #{ids.size} messages"
        ids
      end

      if @msgs.empty? and ! @ids.empty?
        ids = @ids.shift(10)
        query = ids.first .. ids.last
        puts "; requesting messages #{query.inspect} from imap server"
        startt = Time.now
        begin
          if valid? and new_msg?
            @msgs = @imap.uid_fetch(query, ["UID", "X-GM-MSGID", "X-GM-THRID", "X-GM-LABELS", "FLAGS", "RFC822"])
          else
            @msgs = @imap.fetch(query, ["UID", "X-GM-MSGID", "X-GM-THRID", "X-GM-LABELS", "FLAGS", "RFC822"])
          end
        rescue Net::IMAP::ByeResponseError
          puts "Server said BYE to us"
        rescue => e
          puts "Exception during fetch : #{e}"
        end
        elapsed = Time.now - startt

        if @msgs
          @msgs = @msgs.map do |m|

            # Load the message raw data
            body = m.attr["RFC822"]
            body.force_encoding("binary") if body.respond_to?(:force_encoding)
            body.gsub("\r\n", "\n")

            # Load the message labels and add the mailbox name as label.
            # Also downcase the special Inbox mailbox.
            labels = m.attr["X-GM-LABELS"].push(@name).collect { |label|
              if label == "Inbox"   # Special case for Inbox
                label.downcase
              else
                Net::IMAP.decode_utf7(label.to_s)
              end
            }

            # Load the message state flags.
            state = m.attr["FLAGS"].collect { |flag| flag.to_s.downcase.to_sym }

            # Return a hash with all interesting details of the message
            { :body => body, :labels => labels, :state => state, :uid => m.attr["UID"] }
          end
          save
          printf "; the imap server loving gave us #{@msgs.size} messages in %.1fs = a whopping %.1fm/s\n", elapsed, @msgs.size / elapsed
          puts "max UID is #{@uidmax}"
        else
          puts "Warning: fetch returned no new messages"
          @msgs = []
        end
      end

      msg = @msgs.shift
      @uidmax = [@uidmax, msg[:uid]].max  if msg
      msg
    end

    def done?
      if @ids && @ids.empty? && @msgs.empty?
        @uidnext = @imap.responses["UIDNEXT"][-1]
        save
        return true
      end
      false
    end

    def save
      filename = File.join(Mailbox.cache_dir, Net::IMAP.decode_utf7(@name).gsub("/","___"))
      tmp_imap = @imap
      @imap = nil
      File.open(filename,"wb") { |fd|
        fd << Marshal.dump(self)
      }
      @imap = tmp_imap
      self
    end

    private

    def examine(val)
      @imap = val
      @imap.examine(@name)
      @valid = (@uidvalidity == @imap.responses["UIDVALIDITY"][-1])
      @new_msg = (@uidnext != @imap.responses["UIDNEXT"][-1])
      @uidvalidity = @imap.responses["UIDVALIDITY"][-1]
      @ids = nil
      @msgs = []
      self
    end

    def initialize(name)
      puts "Creating new MailboxCache #{Net::IMAP.decode_utf7(name)}"
      @name = name
      @uidmax = 0
      @num_seen = 0
      @num_indexed = 0
      @num_bad = 0
    end

    def Mailbox.load_mailbox(name)
      filename = File.join(@mailbox_cache, Net::IMAP.decode_utf7(name).gsub("/","___"))
      mailbox = nil
      if File.exists?(filename)
        File.open(filename,"rb") { |fd|
          mailbox = Marshal.load(fd.read)
        }
      end
      mailbox
    end

    def Mailbox.sanitize_filename(filename)
      return filename.strip do |name|
        # NOTE: File.basename doesn't work right with Windows paths on Unix
        # get only the filename, not the whole path
        name.gsub! /^.*(\\|\/)/, ''

        # Finally, replace all non alphanumeric, underscore 
        # or periods with underscore
        # name.gsub! /[^\w\.\-]/, '_'
        # Basically strip out the non-ascii alphabets too 
        # and replace with x. 
        # You don't want all _ :)
        name.gsub!(/[^0-9A-Za-z.\-]/, 'x')
      end
    end
  end

  def initialize(user, pass)
    puts "Connecting to Gmail ..."
    @imap = Net::IMAP.new "imap.gmail.com", 993, :ssl => true
    puts "Login as #{user} ..."
    @imap.login user, pass

    # Install response handler to catch UIDPLUS reponse UID
    @imap.add_response_handler { |resp|
     # puts "DEBUG: #{resp}"
      if resp.kind_of?(Net::IMAP::TaggedResponse)
       if resp.data.is_a?Net::IMAP::ResponseText and resp.data.code and resp.data.code.name == "APPENDUID"
         puts "Append Message UID #{resp.data.code.data}"
       end
     end
    }

    @running = true
  end

  # Returns the list of all mailboxes in the GMail account
  # using the X-GM-XLIST IMAP extension. This extension 
  # provides additional metadata about each mailbox.
  def xlist
    @imap.xlist("", "*")
    #@imap.xlist("", "Bookmarks")
  end

  def start
    xlist.each { |mailbox|
      sync_new(mailbox)
    }
  end

  def stop
    @running = false
  end

  # Method that checks a mailbox for new messages and 
  # feed them to Heliotrope. Assumes Heliotrope service
  # is running at http://localhost:8042
  def sync_new(mailbox)
      # Skip any mailbox with attributes in ignore_attr
      return if ! (mailbox.attr & @@ignore_attr).empty?
      return if !@running

      cache = Mailbox.create(@imap, mailbox.name)

      puts "Examining mailbox #{cache.name}"

      until cache.done? or ! @running

        msg = cache.next_message

        next if ! msg


        begin
          response = RestClient.post "http://localhost:8042/message", 
                                     :message => msg[:body], :labels => msg[:labels].to_json, :state => msg[:state].to_json, 
                                     :extra => { :mailbox => cache.name }.to_json
          puts response 
          response = JSON.parse(response)

          if response["response"] == "ok"
            #puts "Message #{msg[:uid]} STATE: #{msg[:state].inspect} LABELS: #{msg[:labels].inspect} MAX: #{cache.uidmax} NEXT: #{cache.uidnext}"
          end
        rescue RestClient::ResourceNotFound => e
          puts "Warning: resource not found"
        rescue => e
          puts "Failed to communicate with heliotrope : #{e.class}"
          puts e.backtrace
        end

      end
  end

  private


end

if __FILE__ == $0

  if ARGV.size < 2
    puts "Usage:  gmail.rb  <username> <password>"
    exit 0
  end

  gmail = GMail.new(ARGV[0], ARGV[1])

  trap("SIGINT") {   puts "-- SIGINT Stopping --";   gmail.stop  }
  trap("SIGTERM") {   puts "-- SIGTERM Stopping --";   gmail.stop  }
  trap("SIGPIPE") {   puts "-- SIGPIPE Stopping --";   gmail.stop  }
  trap("SIGHUP") {   puts "-- SIGHUP Stopping --";   gmail.stop  }

  gmail.start

end

# GMail API allows search via X-GM-RAW extension
#puts "Search via X-GM-RAW extension"
#ids = imap.search(["X-GM-RAW", "to: hsanson"])

# Example how to append a message to GMail
#puts "Test append message"
#imap.append("inbox", <<EOF.gsub(/\n/, "\r\n"), [:Seen], Time.now)
#Subject: hello
#From: shugo@ruby-lang.org
#To: shugo@ruby-lang.org

#hello world
#EOF

